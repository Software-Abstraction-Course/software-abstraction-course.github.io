{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to 50.056","text":"<ul> <li>Course Handout.</li> <li>Course Schedule.</li> </ul>"},{"location":"notes/l1_course_handout/","title":"50.056 Software Abstraction Functional Programming","text":""},{"location":"notes/l1_course_handout/#course-description","title":"Course Description","text":"<p>This course introduces students to functional programming and how to construct software abstractions. Students learn how to compose functions and perform computation in a functional way. Higher order function will be taught as a way to abstract computation. The course then introduces students on how they can abstract data in functional programming. The students will be brought into a discussion of state-based computation and how it is best done to allow better testing and concurrency. In the later part of the course, students will learn how they can apply many these concepts to create meta circular evaluator and implement lazy evaluations. The course introduces many concepts that inspires various programming languages and, throughout, the idea of software abstraction is emphasised.</p>"},{"location":"notes/l1_course_handout/#prerequisites","title":"Prerequisites","text":"<p>10.014 Computational Thinking for Design</p>"},{"location":"notes/l1_course_handout/#module-learning-objectives","title":"Module Learning Objectives","text":"<ul> <li>Learn functional programming concepts and principles</li> <li>Create abstractions for computation and data</li> <li>Discuss the effect of mutability in computation</li> <li>Implement state-based and stream-processing approach in a functional way</li> <li>Create metalinguistic abstraction</li> </ul>"},{"location":"notes/l1_course_handout/#module-learning-outcomes","title":"Module Learning Outcomes","text":"<p>By the end of this course, students should be able to:</p> <ul> <li>Use higher order functions to create abstraction for computations</li> <li>Create abstraction to represent complex data</li> <li>Discuss the advantages and disadvantages of assignment operator in imperative programming</li> <li>Implement state-based model</li> <li>Implement stream-processing approach for computing sequences and iterations</li> <li>Create meta-circular evaluator</li> <li>Discuss the advantages of lazy evaluations and implement it</li> </ul>"},{"location":"notes/l1_course_handout/#resource","title":"Resource","text":"<p>The main resources are lecture slides, tutorial sessions, and online documentations. There are no official textbooks. But the following are useful for reference and deeper understanding of some topics.</p> <ul> <li>Harold Abelson, Gerald Jay Sussman, Julie Sussman. Structure and Interpretation of Computer Programs, 2nd Edition, 1996</li> </ul>"},{"location":"notes/l1_course_handout/#instructors","title":"Instructors","text":"<ul> <li> <p>Prof Oka Kurniawan (oka_kurniawan@sutd.edu.sg)   Office Hour:</p> </li> <li> <p>Prof Kenny Lu (kenny_lu@sutd.edu.sg)   Office Hour: </p> </li> </ul>"},{"location":"notes/l1_course_handout/#communication","title":"Communication","text":"<p>If you have course/assignment/project related questions, please post it on the dedicated MS teams channel.</p>"},{"location":"notes/l1_course_handout/#grading","title":"Grading","text":"<p>Your final grade is computed as follows:</p>"},{"location":"notes/l1_course_handout/#things-you-need-to-prepare","title":"Things you need to prepare","text":"<ul> <li>Git</li> <li>Racket</li> </ul>"},{"location":"notes/l1_course_handout/#project","title":"Project","text":""},{"location":"notes/l1_course_handout/#submission-policy-and-plagiarism","title":"Submission Policy and Plagiarism","text":"<ol> <li>You will do the assignment/project on your own (own teams) and will not copy paste solutions from someone else.</li> <li>You will not post any solutions related to this course to a private/public repository that is accessible by the public/others.</li> <li>Students are allowed to have a private repository for their assignment which no one can access.</li> <li>For projects, students can only invite their partners as collaborators to a private repository.</li> <li>Failing to follow the Code of Honour will result in failing the course and/or being submitted to the University Disciplinary Committee. The consequences apply to both the person who shares their work and the person who copies the work.</li> </ol>"},{"location":"notes/l1_course_handout/#schedule","title":"Schedule","text":"Week Session 1 Session 2 Session 3 Remarks 1 2 3 4 5"},{"location":"notes/l1_course_handout/#make-up-and-alternative-assessment","title":"Make Up and Alternative Assessment","text":"<p>Make ups for Final exam will be administered when there is an official Leave of Absence from OSA. There will be only one make up. There will be no make-up if students miss the make up test.</p>"}]}